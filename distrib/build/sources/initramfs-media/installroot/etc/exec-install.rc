#!/bin/bash

/bin/iowrap /dev/tty7 /bin/bash&
MYBASHPID=$!

CONFIG_ROOT=/var/smoothwall

TITLE="$CLS            ${BOUL}Smoothwall Express 3 (Phaeton Development) Installation$NO"

echo -e "$TITLE"
echo
echo "Tweaking udev"
  echo "  Rules" > /dev/tty1
  (
    echo "# Smoothwall persistent device names"
    echo
    echo "# Auto-generated by Smoothwall installation program: `date`"
    
    echo "    /dev/harddisk's name" >/dev/tty1
    echo "# hard drive's symlink"
    echo "KERNEL==\"${hd_dev[$hd]}\", SYMLINK=\"harddisk\""
    echo "KERNEL==\"${hd_dev[$hd]}?\", SYMLINK=\"harddisk%n\""
    echo
    
    echo "    CD/DVD symlinks" >/dev/tty1
    echo "# CD/DVD drive's symlink"
    echo "KERNEL==\"${cd_dev[$CD]}\", SYMLINK+=\"cdrom cdrom0 sr0 dvd dvd0\""
    echo
  ) > /etc/udev/rules.d/10-Smoothwall.rules

  (
    echo "# Smoothwall persistent custom NIC names"
    echo
    echo "# Auto-generated by Smoothwall installation program: `date`"
    
    echo "    Persistent custom NIC names" > /dev/tty1
    echo "# Persistent NIC names"
    typeset -i i
    i=1
    while [ $i -lt $nic_cnt ]; do
      if [ "${CLR[$i]}" != "not named" ]; then
        echo -n "SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\","
        echo -n " ATTR{address}==\"`cat /sys/class/net/${DEV[$i]}/address`\","
        echo " ATTR{type}==\"1\", KERNEL==\"eth*\", NAME=\"${CLR[$i]}\""
      fi
      i=i+1
    done
  ) > /etc/udev/rules.d/90-Smoothwall-custom-NIC-names.rules

  echo "  Triggering udev and waiting for it to settle"
  do_or_die "/sbin/udevadm trigger"
  do_or_die "/sbin/udevadm settle"

  sleep 2


echo -e "$TITLE"
echo
echo "Partitioning hard drive"
echo
  typeset -i remainder bootsize swapsize rootsize extsize logsize memsize
  hdd="/dev/harddisk"
  # boot partition fixed size
  bootsize=100

  # swap fixed to installed RAM
  set `grep MemTotal /proc/meminfo`
  memsize=$2
  memunit=$3
  swapsize=memsize/1024

  # Compute partition sizes
  # no dev pkgs
  if [ $maxMiB -eq 0 ]; then
    # using whole disk
    remainder=${hd_size[$hd]}-8 # minus a little more than 1 cylinder
    echo "  ${hdd}1  100MiB -> /boot" >/dev/tty1
    echo "  ${hdd}2  ${swapsize}MiB -> swap" >/dev/tty1
    remainder=remainder-bootsize-swapsize
    logsize=remainder/3
    extsize=logsize+1
    echo "  ${hdd}3    ${extsize}MiB -> (extended)" >/dev/tty1
    rootsize=remainder-extsize
    echo "  ${hdd}4    ~${rootsize}MiB -> / (root)" >/dev/tty1
    echo "  ${hdd}5    ${logsize}MiB -> /log" >/dev/tty1
  else
    # using limited size
    remainder=${hd_size[$hd]}-1 # minus a little more than 1 cylinder
    unused=remainder-maxMiB
    echo "  ${hdd}1    100MiB -> /boot" >/dev/tty1
    echo "  ${hdd}2    ${swapsize}MiB -> swap" >/dev/tty1
    remainder=remainder-bootsize-swapsize
    logsize=(remainder-unused)/3
    extsize=unused+logsize+1
    echo "  ${hdd}3    ${extsize}MiB -> (extended)" >/dev/tty1
    rootsize=remainder-extsize
    echo "  ${hdd}4    ~${rootsize}MiB -> / (root)" >/dev/tty1
    echo "  ${hdd}5    ${logsize}MiB -> /log" >/dev/tty1
  fi
  cat >/tmp/sfdisk.parts <<END
1,$bootsize,83,*
,$swapsize,82,
,$extsize,5,
,,83,
,$logsize,83,
END

  echo
  do_or_die "sfdisk -uMq --no-reread /dev/harddisk </tmp/sfdisk.parts"

  sleep 2

echo -e "$TITLE"
echo
echo "Preparing filesystems"
echo
  if [ $filesys -eq 1 ]; then MKFS="mke2fs -FFj"; else MKFS="mkreiserfs -ff"; fi
  echo "  /boot"
  do_or_die "$MKFS /dev/harddisk1"
  echo "  swap"
  do_or_die "mkswap /dev/harddisk2"
  echo "  /"
  do_or_die "$MKFS /dev/harddisk4"
  echo "  /var/log"
  do_or_die "$MKFS /dev/harddisk5"

  echo
  echo "Enabling swap"
  do_or_die "swapon /dev/harddisk2"

  echo "Mounting CD/DVD"
  do_or_die "mount -t iso9660 /dev/cdrom /cdrom"

  if [ $filesys -eq 1 ]; then FS="-t ext3"; else FS="-t reiserfs"; fi
  echo "Mounting new root filesystem"
  do_or_die "mount $FS /dev/harddisk4 /harddisk"

  echo "Mounting /boot and /var/log"
  mkdir -p -m 755 /harddisk/boot /harddisk/var/log
  do_or_die "mount $FS /dev/harddisk1 /harddisk/boot"
  do_or_die "mount $FS /dev/harddisk5 /harddisk/var/log"

  sleep 2

echo -e "$TITLE"
echo
echo "Preparing Smoothwall"
echo
  echo "  unpacking system"
  do_or_die "tar -C /harddisk -zxvf /cdrom/smoothwall.tgz"

  if [ $dev -eq 2 ]; then
    echo "    build tools"
    do_or_die "/bin/tar -C /harddisk -zxvf /cdrom/smoothdev.tgz"
    echo "    build docs & headers"
    do_or_die "/bin/tar -C /harddisk -zxvf /cdrom/smoothdoc.tgz"
  fi

  echo "  copying udev rules to target"
    do_or_die "mkdir -p -m 755 /harddisk/etc/udev/rules.d"
    do_or_die "cp -v /etc/udev/rules.d/*Smoothwall* /harddisk/etc/udev/rules.d/"

  echo "  creating new fstab"
  set -- $FS

  echo >/dev/tty2
  case $2 in
    reiserfs) 
      (
        echo "proc		/proc		proc		defaults	0	0"
        echo "sys		/sys		sysfs		defaults	0	0"
        echo "dev		/dev		tmpfs		defaults	0	0"
        echo "/dev/harddisk2	none		swap		sw		0	0"
        echo
        echo "/dev/harddisk4	/		reiserfs	notail		0	1"
        echo "/dev/harddisk1	/boot		reiserfs	defaults	0	2"
        echo "/dev/harddisk5	/var/log	reiserfs	defaults	0	2"
      ) >/harddisk/etc/fstab
      ;;
    ext3)
      (
        echo "proc		/proc		proc		defaults	0	0"
        echo "sys		/sys		sysfs		defaults	0	0"
        echo "dev		/dev		tmpfs		defaults	0	0"
        echo "/dev/harddisk2	none		swap		sw		0	0"
        echo
        echo "/dev/harddisk4	/		ext3		defaults	0	1"
        echo "/dev/harddisk1	/boot		ext3		defaults	0	2"
        echo "/dev/harddisk5	/var/log	ext3		defaults	0	2"
      ) >/harddisk/etc/fstab
      ;;
  esac
  cat /harddisk/etc/fstab >/dev/tty2

  echo "  creating new mtab"
  do_or_die ">/harddisk/etc/mtab; chmod 644 /harddisk/etc/mtab"
  do_or_die "/bin/chroot /harddisk /bin/mount -f /proc"
  do_or_die "/bin/chroot /harddisk /bin/mount -f /sys"
  do_or_die "/bin/chroot /harddisk /bin/mount -f /dev"
  do_or_die "/bin/chroot /harddisk /bin/mount -a -f"
  
  echo "  saving configs and settings"
  cat <<END > /harddisk/$CONFIG_ROOT/main/hwprofile
STORAGE_DEVNODE=${hd_dev[$hd]}
CDROM_DEVNODE=${cd_dev[$CD]}
STORAGE_DRIVER=
STORAGE_DRIVER_OPTIONS=
END

  uname -r >/harddisk/$CONFIG_ROOT/main/kernel

  cat <<END >/harddisk/$CONFIG_ROOT/main/settings
LANGUAGE=en
HOSTNAME=smoothwall
KEYMAP=/usr/share/kbd/keymaps/i386/qwerty/us.map.gz
OPENNESS=halfopen
END

  echo "  prepping module dependencies"
  do_or_die "/bin/chroot /harddisk /sbin/depmod -a"

  echo "  tweaking initramfs"
  set -- $FS

  echo "    unpacking runtime initramfs"
  OPWD=`pwd`
  mkdir -p /runtimeroot; cd /runtimeroot
  do_or_die "gunzip -c /boot/runtimerootimage.gz | cpio -id"
  echo "    copying udev rules to runtime initramfs"
    do_or_die "mkdir -p -m 755 /runtimeroot/etc/udev/rules.d"
    do_or_die "cp -v /etc/udev/rules.d/*Smoothwall* /runtimeroot/etc/udev/rules.d/"

  case $2 in
    reiserfs) 
      (
        echo "/dev/${hd_dev[$hd]}4	/harddisk	reiserfs	notail		0	1"
      ) >/runtimeroot/etc/fstab
      ;;
    ext3)
      (
        echo "/dev/${hd_dev[$hd]}4	/harddisk	ext3		defaults	0	1"
      ) >/runtimeroot/etc/fstab
      ;;
  esac
  do_or_die "/bin/chroot /runtimeroot /sbin/depmod -a"
  do_or_die "cd /runtimeroot; find . | cpio -o -H newc | gzip > /harddisk/boot/initrd-2.6.26.8-phaeton.gz"
  do_or_die "chmod 444 /harddisk/boot/initrd-2.6.26.8-phaeton.gz"

  echo "  installing boot loader"
  do_or_die "mount --bind /proc /harddisk/proc"
  do_or_die "mount --bind /sys /harddisk/sys"
  do_or_die "mount --bind /dev /harddisk/dev"
  if [ $loader -eq 1 ]; then
  cat > /harddisk/boot/grub/menu.lst <<END
# Begin /boot/grub/menu.lst

# By default boot the first menu entry.
default 0

# Allow 30 seconds before booting the default.
timeout 30

# Use prettier colors.
color green/white light-green/black

# The first entry is for Smoothwall.
title Smoothwall Express 3.0 (Phaeton Project)
root (hd0,0)
kernel /vmlinuz-2.6.26.8-phaeton root=/dev/harddisk4 ro quiet
initrd /initrd-2.6.26.8-phaeton.gz

# The second entry is for booting Smoothwall into single-user mode.
title Smoothwall Express 3.0 (Phaeton Project) Single-User
root (hd0,0)
kernel /vmlinuz-2.6.26.8-phaeton root=/dev/harddisk4 ro single
initrd /initrd-2.6.26.8-phaeton.gz
END

    do_or_die "/sbin/chroot /harddisk /usr/sbin/grub-install /dev/harddisk"
  else
    do_or_die "lilo -r /harddisk"
  fi

sleep 2

kill -9 $MYBASHPID >/dev/null 2>/dev/null
