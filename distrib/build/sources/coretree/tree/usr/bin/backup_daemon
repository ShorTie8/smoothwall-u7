#! /bin/bash

# Usage statement
usage () {
  echo "Usage: $0 [ var | total ]"
  echo "  - var: save only variable data in /var and /usr/etc"
  echo "  - total: save all of /, /boot and /var/log"
  echo
  exit 1
}

# Provide user feedback, to the flag file for the UI if started from the UI,
#   or to STDOUT if started manually
feedback () {
  if [ "$1" == "AUTO" ]; then
    echo $2 > /${BACK_FLAG}
  else
    if [ "$3" == "same" ]; then
      echo -e "\033[A$2\033[K"
    else
      echo $2
    fi
  fi
}

# How this was run determines where feedback is sent.
if [ `basename $0` == "backup_daemon" ]; then
  if [ $PPID -ne 1 ]; then
    echo "Only init (process #1) can run the daemon!"
    exit 1;
  fi
  AUTOBACK="AUTO"
else
  case $1 in
    "var"|"total") BACKUP_TYPE="$1";;
    *) usage; exit 1;;
  esac
  AUTOBACK="MANUAL"
fi

# Get the smoothie pedigree
. /var/smoothwall/main/productdata
RELEASE="phaeton-a5.0.6-rcl"

# Prepare a bunch of shorthand
BACK_DIR=var/smoothwall/backup
BACK_FLAG="${BACK_DIR}/backup.flag"

set ${RELEASE/-/ }
RELTYPE=$1
RELVER=$2

HOST=`uname -n`
DATE=`date +"%Y-%m-%d"`
TIME=`date +"%H:%M:%S"`

KERNEL=`uname -r`
FNAME="${HOST}_${DATE}_${RELTYPE}_${RELVER}_${KERNEL}"
HNAME="${BACK_DIR}/${FNAME}"
touch /${HNAME}.tarhead
touch /${HNAME}.tarheel

EXCLUDES="--exclude=proc/* --exclude=dev/* --exclude=sys/* --exclude=backup/*"

TO_BITBKT=">/dev/null 2>&1"

INOTIFY_CMD="inotifywait -q"
DEV_FILE="/${BACK_DIR}/backup.devices"

# Go to the working dir
cd /$BACK_DIR

# Normalize the flag file
touch backup.flag
chgrp nobody backup.flag
chmod 660 backup.flag

# Only check the flag file if running as daemon
if [ $AUTOBACK == "AUTO" ]; then
  WATCH="MODIFY"

  # Wait until the file changes; ignore all other changes
  while :; do
    set `$INOTIFY_CMD -e $WATCH /${BACK_FLAG} 2>/dev/null`

    # Go 'round again if the wrong things appear
    #if [ $2!=$WATCH -o $3!="backup.flag" ]; then continue; fi

    # Get the backup type and break out of loop if it's correct
    BACKUP_TYPE=`cat /${BACK_FLAG}`
    if [ "$BACKUP_TYPE"=="var" -o "$BACKUP_TYPE"=="total" ]; then break; fi

    # Go 'round again; note that the flag file now exists
  done

  /usr/bin/sounds/inserted # Audible
fi

if [ ${BACKUP_TYPE} == "var" ]; then
  VAR_FILES="${EXCLUDES} ${HNAME}.tarhead var /usr/etc @var/smoothwall/backup ${HNAME}.tarheel"
else
  VAR_FILES="${EXCLUDES} ${HNAME}.tarhead . ${HNAME}.tarheel"
fi

feedback $AUTOBACK "Plug in flash drive"

# Wait until a new [0-9] node appears in /dev
WATCH="CREATE"
while :; do
  # Run the file watch as a silent daemon
  $INOTIFY_CMD -e $WATCH /dev  -d -o ${DEV_FILE}&
  # Wait for the first change
  $INOTIFY_CMD -e $WATCH /dev >/dev/null 2>/dev/null
  
  # wait for the rest of the nodes to be made, then kill the monitor
  sleep 1
  killall -9 inotifywait
  #sed -e 's/^/  /' backup.devices
  
  # Now look for the device
  while read a b c; do
    if [ -e /sys/block/$c ]; then
      # check the first 4 partitions, quit at the first one found
      NODE=""
      for i in 1 2 3 4; do
        if [ -e /sys/block/$c/${c}${i} ]; then
          NODE=$c$i
          break;
        fi
      done
    fi
    if [ ! -z "$NODE" ]; then break; fi
  done < ${DEV_FILE}
  if [ ! -z "$NODE" ]; then break; fi
done
rm -f ${DEV_FILE}

# Make and mount
MOUNT_PT=/backup
mkdir -p $MOUNT_PT
FAIL=0
mount /dev/$NODE $MOUNT_PT >/dev/null 2>&1 || FAIL=1

if [ $FAIL -eq 1 ]; then
feedback $AUTOBACK "Couldn't mount the flash drive. Please verify that it is partitioned\nand contains a good filesystem."
  /usr/bin/sounds/mount_failed.bps
else
  /usr/bin/sounds/mount_succeeded.bps
  # Get the file count first (for progress feedback)
  tar cvf /dev/null -C / ${VAR_FILES} > ${FNAME}.list 2>/dev/null
  sed -ie 's=^/==' ${FNAME}.list
  typeset -i i FILECOUNT
  FILECOUNT=`cat ${FNAME}.list | wc -l`
  FILECOUNT=FILECOUNT+2
  i=0
  if [ $AUTOBACK == "MANUAL" ]; then echo; fi
  tar cvfz ${MOUNT_PT}/${FNAME}.tar.gz \
      --no-recursion \
      -C / \
      ${HNAME}.tarhead -T ${FNAME}.list ${HNAME}.tarheel \
      2>/dev/null | while read a; do
    i=i+1
    feedback $AUTOBACK "$i/$FILECOUNT: $a" "same"
  done

  feedback $AUTOBACK "Flushing data to backup device"

  # Unmount
  while :; do
    umount $MOUNT_PT >/dev/null 2>&1 && break;
    sleep 1
  done
fi

# Tell the user to unplug the drive
/usr/bin/sounds/ring.bpf

feedback $AUTOBACK "Unplug the flash drive."

# Wait for deletion of the node mounted
WATCH="DELETE"
while :; do
  # Run the file watch as a silent daemon
  $INOTIFY_CMD -e $WATCH /dev  -d -o ${DEV_FILE}&
  # Wait for the first change
  $INOTIFY_CMD -e $WATCH /dev >/dev/null 2>/dev/null
  
  sleep 1
  killall -9 inotifywait
  #sed -e 's/^/  /' backup.devices
  
  # Now look for the device
  grep "${NODE}" $DEV_FILE >/dev/null 2>&1 && break
done

/usr/bin/sounds/removed

rm -f ${DEV_FILE}

echo "Last backup: $AUTOBACK; date=$DATE $TIME; type=$BACKUP_TYPE" > /${BACK_FLAG}

if [ "$AUTOBACK" == "MANUAL" ]; then
  echo "Backup complete."
fi
