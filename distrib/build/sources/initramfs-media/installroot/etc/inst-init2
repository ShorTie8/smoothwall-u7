#!/bin/bash 

function rsr {
  echo -ne "\033[r\033[20;1f\033[J\033"
  echo -ne "8"
}

function ssr {
  echo -ne "\033"
  echo -ne "7\033[21;24r"
  echo -ne "\033[20;1fExecuting: "
  echo -n $1
  echo -ne "\033[21;1f"
}

function do_or_die {
  ssr "$1"
  eval "$1"
  #eval "$1 >/dev/tty2 2>/dev/tty2"
  exitcode=$?
  rsr
  
  if [ $exitcode -ne 0 ]; then
    echo "FAILED: \"$1\""
    echo "  exit code: $exitcode"
    echo
    echo "Tap <ALT><F2> to review error messages"
    echo "Tap <ALT><F1> to return to this console"
    echo
    echo "Press enter to reboot the system and try again."
    read a </dev/tty1
    reboot -f
  fi
}

CLS="\033[0;0f\033[2J"
BO="\033[1m"
UL="\033[4m"
BOUL="\033[1;4m"
NO="\033[0m"

echo "Loading, please wait..."

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp

/sbin/depmod -a

echo "Mounting sys, proc"
mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid none /sys 
mount -t proc -o nodev,noexec,nosuid none /proc 

echo "Making some needed /dev entries"
test -e /dev/console || mknod -m0600 /dev/console c 5 1
test -e /dev/null || mknod -m0777 /dev/null c 1 3

echo "Mounting root read/write"
mount -n -o remount,rw /

echo "Clearing mtab"
>/etc/mtab

echo "Marking root as mounted"
mount -f /

# Mounting and populating dev
/etc/udev.rc

echo "Starting USB"
/sbin/modprobe usbcore
/sbin/modprobe ohci-hcd
/sbin/modprobe uhci-hcd
/sbin/modprobe ehci-hcd
/sbin/modprobe usbhid
/bin/mount -t usbfs busprocusb /proc/bus/usb

echo "1 4 1 7" >/proc/sys/kernel/printk
#echo "0 0 0 0" >/proc/sys/kernel/printk

function EXITTRAP {
  trap - EXIT
  kill -9 $ASHPID
  export TERM=linux; tput clear >/dev/tty3
  kill -9 $BASHPID
  export TERM=linux; tput clear >/dev/tty4

  echo "Unexpected exit! Restarting..."
  sleep 2

  umount /harddisk/var/log
  umount /harddisk/boot
  umount /harddisk/sys
  umount /harddisk/dev
  umount /harddisk/proc
  umount /harddisk
  umount /cdrom
  swapoff -a

  echo "Dropping to a shell..."
  /bin/bash </dev/tty1 >/dev/tty1 2>/dev/tty1

  exec /init
}
  
trap EXITTRAP EXIT

/bin/iowrap /dev/tty3 /bin/ash&
export ASHPID=$!
/bin/iowrap /dev/tty4 /bin/bash -mi&
export BASHPID=$!

[ -t 0 ] || (echo "STDIN not a tty"; exit)

echo "Configuring installer"
. /etc/config-install.rc

echo "Executing installer"
. /etc/exec-install.rc

echo -e "$TITLE"
echo
echo "Preparing Setup"
echo
  echo "  cleaning up"
    cp /bin/iowrap /harddisk/tmp

    trap - EXIT
    kill -9 $ASHPID >/dev/null 2>/dev/null | sed -e 's/Killed            /Killed/'
    kill -9 $BASHPID >/dev/null 2>/dev/null | sed -e 's/Killed            /Killed/'
    export TERM=linux
    echo -ne $CLS >/dev/tty3
    echo -ne $CLS >/dev/tty4

  echo "  prepare root switch"
    mount -n -o move /dev /harddisk/dev
    /usr/lib/klibc/bin/nuke /dev
    ln -s /harddisk/dev /dev

    mount -n -o move /sys /harddisk/sys
    mount -n -o move /proc /harddisk/proc

    rm -rf /dev
    ln -s /harddisk/dev /dev
    cd /harddisk
    mkdir -p old_mount
    /bin/bash </dev/console >/dev/console 2>/dev/console

  echo "  run setup"
    chroot . /usr/sbin/setup /dev/tty2 INSTALL

echo -e "$TITLE"
echo
  echo "  kill udev"
  # Stop udevd, we'll miss a few events while we run init, but we catch up
  cd /
  mount -t proc proc /proc
  for proc in /proc/[0-9]*; do
    [ -x $proc/exe ] || continue
    [ "$(/usr/lib/klibc/bin/readlink $proc/exe)" != /bin/udevd ] || kill ${proc#/proc/}
  done
  umount /proc

  echo "  starting target's /sbin/init"
  exec /usr/lib/klibc/bin/run-init /harddisk /sbin/init </harddisk/dev/console >/harddisk/dev/console 2>&1

  echo
  echo "!!!!!!!!!!!!!!!!!!!!!!!"
  echo "!!!!    run-init failed to exec target's /sbin/init"
  echo "!!!!    Halting the system."
  /sbin/halt -f
  echo "!!!!!!!!!!!!!!!!!!!!!!!"
  echo
