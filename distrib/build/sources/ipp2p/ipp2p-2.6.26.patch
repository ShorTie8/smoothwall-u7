diff -ruN ipp2p-0.8.2/ipt_ipp2p.c ipp2p-0.8.2-patch/ipt_ipp2p.c
--- ipp2p-0.8.2/ipt_ipp2p.c	2006-09-27 11:52:00.000000000 +0200
+++ ipp2p-0.8.2-patch/ipt_ipp2p.c	2009-08-07 05:36:13.000000000 +0200
@@ -2,7 +2,7 @@
 #include <linux/modversions.h>
 #endif
 #include <linux/module.h>
-#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter/x_tables.h>
 #include <linux/version.h>
 //#include <linux/netfilter_ipv4/ipt_ipp2p.h>
 #include "ipt_ipp2p.h"
@@ -725,30 +725,22 @@
 };
 
 
-static int
-match(const struct sk_buff *skb,
-      const struct net_device *in,
-      const struct net_device *out,
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,17)
-      const struct xt_match  *mymatch,
-      const void *matchinfo,
-      int offset,
-      unsigned int myprotoff,
-#else
-      const void *matchinfo,
-      int offset,
-#endif
-
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
-      const void *hdr,
-      u_int16_t datalen,
-#endif
-
-      int *hotdrop)
+static bool match(const struct sk_buff *skb,
+                      const struct net_device *in,
+                      const struct net_device *out,
+                      const struct xt_match *match,
+                      const void *matchinfo,
+                      int offset,
+                      unsigned int protoff,
+                      bool *hotdrop)
 {
     const struct ipt_p2p_info *info = matchinfo;
     unsigned char  *haystack;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,22)
+    struct iphdr *ip = ip_hdr(skb);
+#else
     struct iphdr *ip = skb->nh.iph;
+#endif
     int p2p_result = 0, i = 0;
 //    int head_len;
     int hlen = ntohs(ip->tot_len)-(ip->ihl*4);	/*hlen = packet-data length*/
@@ -822,17 +814,13 @@
 
 
 
-static int
-checkentry(const char *tablename,
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,17)
-           const void *ip, 
-           const struct xt_match *mymatch,
-#else
-           const struct ipt_ip *ip,
-#endif
-	   void *matchinfo,
-	   unsigned int matchsize,
-	   unsigned int hook_mask)
+static bool
+checkentry
+(const char *tablename,
+ const void *ip,
+ const struct xt_match *match,
+ void *matchinfo,
+ unsigned int hook_mask)
 {
         /* Must specify -p tcp */
 /*    if (ip->proto != IPPROTO_TCP || (ip->invflags & IPT_INV_PROTO)) {
@@ -852,7 +840,7 @@
 	long int i_also_dunno_what_this_is_for;
 };
 
-static struct ipt_match ipp2p_match = { 
+static struct xt_match ipp2p_match = { 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
 	{ NULL, NULL }, 
 	"ipp2p", 
@@ -880,12 +868,20 @@
 static int __init init(void)
 {
     printk(KERN_INFO "IPP2P v%s loading\n", IPP2P_VERSION);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,21)
+    return xt_register_match(&ipp2p_match);
+#else
     return ipt_register_match(&ipp2p_match);
+#endif
 }
 	
 static void __exit fini(void)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,21)
+   xt_unregister_match(&ipp2p_match);
+#else
     ipt_unregister_match(&ipp2p_match);
+#endif
     printk(KERN_INFO "IPP2P v%s unloaded\n", IPP2P_VERSION);    
 }
 	
diff -ruN ipp2p-0.8.2/ipt_ipp2p.h ipp2p-0.8.2-patch/ipt_ipp2p.h
--- ipp2p-0.8.2/ipt_ipp2p.h	2006-09-27 11:59:59.000000000 +0200
+++ ipp2p-0.8.2-patch/ipt_ipp2p.h	2009-08-07 13:51:55.000000000 +0200
@@ -1,6 +1,6 @@
 #ifndef __IPT_IPP2P_H
 #define __IPT_IPP2P_H
-#define IPP2P_VERSION "0.8.2"
+#define IPP2P_VERSION "0.8.2+2.6.22-patch"
 
 struct ipt_p2p_info {
     int cmd;
diff -ruN ipp2p-0.8.2/libipt_ipp2p.c ipp2p-0.8.2-patch/libipt_ipp2p.c
--- ipp2p-0.8.2/libipt_ipp2p.c	2006-01-04 17:24:19.000000000 +0100
+++ ipp2p-0.8.2-patch/libipt_ipp2p.c	2009-08-07 05:36:13.000000000 +0200
@@ -7,6 +7,10 @@
 #include <ctype.h>
 
 #include <iptables.h>
+#include <xtables.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <libiptc/libiptc.h>
+
 
 #include "ipt_ipp2p.h"
 
@@ -64,12 +68,10 @@
 	
 
 static void
-init(struct ipt_entry_match *m, unsigned int *nfcache)
+init(struct xt_entry_match *m)
 {
     struct ipt_p2p_info *info = (struct ipt_p2p_info *)m->data;
 
-    *nfcache |= NFC_UNKNOWN;
-
     /*init the module with default values*/
     info->cmd = 0;
     info->debug = 0;
@@ -77,50 +79,50 @@
 }
 	
 
+// const struct ipt_entry *entry,
 static int
 parse(int c, char **argv, int invert, unsigned int *flags,
-	const struct ipt_entry *entry,
-	unsigned int *nfcache,
-	struct ipt_entry_match **match)
+                     const void *entry,
+                     struct xt_entry_match **match)
 {
     struct ipt_p2p_info *info = (struct ipt_p2p_info *)(*match)->data;
     
     switch (c) {
 	case '1':		/*cmd: ipp2p*/
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified once!");
 /*	    if ((*flags & SHORT_HAND_DATA) == SHORT_HAND_DATA)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p-data' may only be "
 				"specified alone!");*/
 	    if ((*flags) != 0)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
 	    *flags += SHORT_HAND_IPP2P;
 	    info->cmd = *flags;
 	    break;
 	    
 	case '2':		/*cmd: edk*/
 	    if ((*flags & IPP2P_EDK) == IPP2P_EDK)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--edk' may only be "
 				"specified once");
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
 /*	    if ((*flags & SHORT_HAND_DATA) == SHORT_HAND_DATA)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p-data' may only be "
 				"specified alone!");*/
             if ((*flags & IPP2P_DATA_EDK) == IPP2P_DATA_EDK)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: use `--edk' OR `--edk-data' but not both of them!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
 	    *flags += IPP2P_EDK;
 	    info->cmd = *flags;	    
 	    break;
@@ -128,21 +130,21 @@
 
 	case '7':		/*cmd: dc*/
             if ((*flags & IPP2P_DC) == IPP2P_DC)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--dc' may only be "
                                 "specified once!");
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
 /*	    if ((*flags & SHORT_HAND_DATA) == SHORT_HAND_DATA)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p-data' may only be "
 				"specified alone!");*/
             if ((*flags & IPP2P_DATA_DC) == IPP2P_DATA_DC)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: use `--dc' OR `--dc-data' but not both of them!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_DC;
 	    info->cmd = *flags;
 	    break;
@@ -150,70 +152,70 @@
 
 	case '9':		/*cmd: gnu*/
             if ((*flags & IPP2P_GNU) == IPP2P_GNU)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--gnu' may only be "
                                 "specified once!");
 /*	    if ((*flags & SHORT_HAND_DATA) == SHORT_HAND_DATA)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p-data' may only be "
 				"specified alone!");*/
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
             if ((*flags & IPP2P_DATA_GNU) == IPP2P_DATA_GNU)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: use `--gnu' OR `--gnu-data' but not both of them!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_GNU;
 	    info->cmd = *flags;
 	    break;
 
 	case 'a':		/*cmd: kazaa*/
             if ((*flags & IPP2P_KAZAA) == IPP2P_KAZAA)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--kazaa' may only be "
                                 "specified once!");
 /*	    if ((*flags & SHORT_HAND_DATA) == SHORT_HAND_DATA)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p-data' may only be "
 				"specified alone!");*/
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
             if ((*flags & IPP2P_DATA_KAZAA) == IPP2P_DATA_KAZAA)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: use `--kazaa' OR `--kazaa-data' but not both of them!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_KAZAA;
 	    info->cmd = *flags;
 	    break;																											
 
 	case 'b':		/*cmd: bit*/
             if ((*flags & IPP2P_BIT) == IPP2P_BIT)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--bit' may only be "
                                 "specified once!");
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_BIT;
 	    info->cmd = *flags;
 	    break;																											
 
 	case 'c':		/*cmd: apple*/
             if ((*flags & IPP2P_APPLE) == IPP2P_APPLE)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--apple' may only be "
                                 "specified once!");
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_APPLE;
 	    info->cmd = *flags;
 	    break;																											
@@ -221,14 +223,14 @@
 
 	case 'd':		/*cmd: soul*/
             if ((*flags & IPP2P_SOUL) == IPP2P_SOUL)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--soul' may only be "
                                 "specified once!");
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_SOUL;
 	    info->cmd = *flags;
 	    break;																											
@@ -236,67 +238,67 @@
 
 	case 'e':		/*cmd: winmx*/
             if ((*flags & IPP2P_WINMX) == IPP2P_WINMX)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--winmx' may only be "
                                 "specified once!");
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_WINMX;
 	    info->cmd = *flags;
 	    break;																											
 
 	case 'f':		/*cmd: ares*/
             if ((*flags & IPP2P_ARES) == IPP2P_ARES)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--ares' may only be "
                                 "specified once!");
 	    if ((*flags & SHORT_HAND_IPP2P) == SHORT_HAND_IPP2P)
-		    exit_error(PARAMETER_PROBLEM,
+		    xtables_error(PARAMETER_PROBLEM,
 				"ipp2p: `--ipp2p' may only be "
 				"specified alone!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_ARES;
 	    info->cmd = *flags;
 	    break;																											
 	
 	case 'g':		/*cmd: mute*/
             if ((*flags & IPP2P_MUTE) == IPP2P_MUTE)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--mute' may only be "
                                 "specified once!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_MUTE;
 	    info->cmd = *flags;
 	    break;																											
 	case 'h':		/*cmd: waste*/
             if ((*flags & IPP2P_WASTE) == IPP2P_WASTE)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--waste' may only be "
                                 "specified once!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_WASTE;
 	    info->cmd = *flags;
 	    break;																											
 	case 'i':		/*cmd: xdcc*/
             if ((*flags & IPP2P_XDCC) == IPP2P_XDCC)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
                                 "ipp2p: `--ares' may only be "
                                 "specified once!");
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
             *flags += IPP2P_XDCC;
 	    info->cmd = *flags;
 	    break;																											
 
 	case 'j':		/*cmd: debug*/
-	    if (invert) exit_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
+	    if (invert) xtables_error(PARAMETER_PROBLEM, "ipp2p: invert [!] is not allowed!");
 	    info->debug = 1;
 	    break;																											
 
 	default:
-//            exit_error(PARAMETER_PROBLEM,
+//            xtables_error(PARAMETER_PROBLEM,
 //	    "\nipp2p-parameter problem: for ipp2p usage type: iptables -m ipp2p --help\n");
 	    return 0;
     }
@@ -308,16 +310,14 @@
 final_check(unsigned int flags)
 {
     if (!flags)
-            exit_error(PARAMETER_PROBLEM,
+            xtables_error(PARAMETER_PROBLEM,
 	    "\nipp2p-parameter problem: for ipp2p usage type: iptables -m ipp2p --help\n");
 }
 
 
 
-static void
-print(const struct ipt_ip *ip,
-        const struct ipt_entry_match *match,
-	int numeric)
+static void print(const void *ip,
+       const struct xt_entry_match *match, int numeric)
 {
     struct ipt_p2p_info *info = (struct ipt_p2p_info *)match->data;
     
@@ -347,7 +347,7 @@
 
 
 static void
-save(const struct ipt_ip *ip, const struct ipt_entry_match *match)
+save(const void *ip, const struct xt_entry_match *match)
 {
     struct ipt_p2p_info *info = (struct ipt_p2p_info *)match->data;
     
@@ -376,11 +376,11 @@
 
 
 static 
-struct iptables_match ipp2p= 
+struct xtables_match ipp2p= 
 { 
     .next           = NULL,
     .name           = "ipp2p",
-    .version        = IPTABLES_VERSION,
+    .version        = XTABLES_VERSION,
     .size           = IPT_ALIGN(sizeof(struct ipt_p2p_info)),
     .userspacesize  = IPT_ALIGN(sizeof(struct ipt_p2p_info)),
     .help           = &help,
@@ -396,6 +396,6 @@
 
 void _init(void)
 {
-    register_match(&ipp2p);
+    xtables_register_match(&ipp2p);
 }
 
diff -ruN ipp2p-0.8.2/Makefile ipp2p-0.8.2-patch/Makefile
--- ipp2p-0.8.2/Makefile	2006-09-27 12:03:41.000000000 +0200
+++ ipp2p-0.8.2-patch/Makefile	2009-08-07 05:36:13.000000000 +0200
@@ -26,17 +26,13 @@
 SED = sed
 IPTABLES_BIN = iptables
 
-ifndef $(IPTABLES_SRC)
-IPTVER = \
-	$(shell $(IPTABLES_BIN) --version | $(SED) -e 's/^iptables v//')
-IPTABLES_SRC = $(wildcard /usr/src/iptables-$(IPTVER))
-endif
+IPTABLES_SRC = /usr/src/linux-headers-`uname -r`
 
 ifeq ($(IPTABLES_SRC),)
 $(warning You need to install iptables sources and maybe set IPTABLES_SRC)
 endif
 
-IPTABLES_INCLUDE = -I$(IPTABLES_SRC)/include
+IPTABLES_INCLUDE = -I$(IPTABLES_SRC)/include/config/ip/nf/
 
 ifneq ($(IPTVER),)
 	IPTABLES_VERSION = $(IPTVER)
@@ -64,7 +60,7 @@
 
 libipt_ipp2p.so: libipt_ipp2p.c ipt_ipp2p.h
 	$(CC) $(CFLAGS) $(IPTABLES_OPTION) $(IPTABLES_INCLUDE) -fPIC -c libipt_ipp2p.c
-	ld -shared -o libipt_ipp2p.so libipt_ipp2p.o
+	$(CC) -shared -o libipt_ipp2p.so libipt_ipp2p.o	
 
 clean:
 	-rm -f *.o *.so *.ko .*.cmd *.mod.c
diff -ruN ipp2p-0.8.2/modules.order ipp2p-0.8.2-patch/modules.order
--- ipp2p-0.8.2/modules.order	1970-01-01 01:00:00.000000000 +0100
+++ ipp2p-0.8.2-patch/modules.order	2009-08-07 05:36:13.000000000 +0200
@@ -0,0 +1 @@
+kernel//root/ipp2p-0.8.2/ipt_ipp2p.ko
diff -ruN ipp2p-0.8.2/README ipp2p-0.8.2-patch/README
--- ipp2p-0.8.2/README	2006-09-27 12:04:20.000000000 +0200
+++ ipp2p-0.8.2-patch/README	2009-08-07 05:36:13.000000000 +0200
@@ -14,7 +14,7 @@
 Versions:
 ---------
 Currently IPP2P is tested to be working together with:
- -Linux-Kernels 2.6: 2.6.3, 2.6.4, 2.6.6, 2.6.17
+ -Linux-Kernels 2.6: 2.6.3, 2.6.4, 2.6.6, 2.6.17, 2.6.26
  -Linux-Kernels 2.4: 2.4.18, 2.4.19, 2.4.20, 2.4.21, 2.4.22, 2.4.23, 2.4.26
  -iptables (from netfilter.org) 1.2.7a, 1.2.8, 1.2.9, 1.2.11, 1.3.0, 1.3.1
 You can try to run IPP2P with different kernel or iptables versions. Feel free to contact me
@@ -108,3 +108,5 @@
 Find the official IPP2P homepage at:
 http://www.ipp2p.org
 
+(Inofficial) Patch for kernels 2.6.22+ has been made by Arno Toell
+gott {at} burnachurch {dot} com
diff -ruN ipp2p-0.8.2/.tmp_versions/ipt_ipp2p.mod ipp2p-0.8.2-patch/.tmp_versions/ipt_ipp2p.mod
--- ipp2p-0.8.2/.tmp_versions/ipt_ipp2p.mod	1970-01-01 01:00:00.000000000 +0100
+++ ipp2p-0.8.2-patch/.tmp_versions/ipt_ipp2p.mod	2009-08-07 05:36:13.000000000 +0200
@@ -0,0 +1,2 @@
+/root/ipp2p-0.8.2/ipt_ipp2p.ko
+/root/ipp2p-0.8.2/ipt_ipp2p.o
